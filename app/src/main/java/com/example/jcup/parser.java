
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.jcup;

import java_cup.runtime.Symbol;
import com.example.objetos.Operacion;
import com.example.objetos.Error;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\003\006\000\002\003\006" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\004\000\002\006\007\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\004\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\006\000\002\014\010\000\002\015" +
    "\003\000\002\015\005\000\002\016\010\000\002\017\003" +
    "\000\002\017\005\000\002\020\010\000\002\021\007\000" +
    "\002\021\011\000\002\022\006\000\002\023\003\000\002" +
    "\023\003\000\002\024\006\000\002\025\006\000\002\026" +
    "\010\000\002\027\010\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\004\004\006\001\002\000\006\034" +
    "\166\036\165\001\002\000\004\002\164\001\002\000\006" +
    "\005\007\006\011\001\002\000\004\033\137\001\002\000" +
    "\010\003\004\004\006\022\130\001\002\000\004\033\012" +
    "\001\002\000\020\007\015\012\027\013\022\014\026\015" +
    "\024\020\017\021\031\001\002\000\022\007\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\020\uffee\021\uffee\034\uffee\001" +
    "\002\000\022\007\015\012\027\013\022\014\026\015\024" +
    "\020\017\021\031\034\ufff6\001\002\000\004\035\121\001" +
    "\002\000\022\007\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\020\uffef\021\uffef\034\uffef\001\002\000\004\035\116\001" +
    "\002\000\022\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\034\ufff1\001\002\000\022\007\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\034\ufff2" +
    "\001\002\000\004\035\106\001\002\000\022\007\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\034\ufff3" +
    "\001\002\000\004\035\101\001\002\000\004\034\100\001" +
    "\002\000\004\035\046\001\002\000\004\035\036\001\002" +
    "\000\022\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020" +
    "\ufff0\021\ufff0\034\ufff0\001\002\000\004\035\033\001\002" +
    "\000\022\007\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020" +
    "\ufff4\021\ufff4\034\ufff4\001\002\000\004\040\034\001\002" +
    "\000\004\036\035\001\002\000\022\007\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\020\uffda\021\uffda\034\uffda\001\002" +
    "\000\004\031\037\001\002\000\004\040\041\001\002\000" +
    "\004\032\044\001\002\000\006\032\uffe5\037\042\001\002" +
    "\000\004\040\041\001\002\000\004\032\uffe4\001\002\000" +
    "\004\036\045\001\002\000\022\007\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\020\uffe6\021\uffe6\034\uffe6\001\002\000" +
    "\004\031\047\001\002\000\004\033\051\001\002\000\004" +
    "\032\076\001\002\000\010\027\053\042\056\043\055\001" +
    "\002\000\024\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1" +
    "\032\uffd1\034\uffd1\036\uffd1\037\uffd1\001\002\000\010\027" +
    "\053\042\056\043\055\001\002\000\014\023\063\024\062" +
    "\025\060\026\061\037\057\001\002\000\024\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\030\uffcf\032\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\001\002\000\024\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\030\uffd0\032\uffd0\034\uffd0\036\uffd0\037\uffd0\001\002" +
    "\000\010\027\053\042\056\043\055\001\002\000\010\027" +
    "\053\042\056\043\055\001\002\000\010\027\053\042\056" +
    "\043\055\001\002\000\010\027\053\042\056\043\055\001" +
    "\002\000\010\027\053\042\056\043\055\001\002\000\024" +
    "\023\uffd6\024\uffd6\025\060\026\061\030\uffd6\032\uffd6\034" +
    "\uffd6\036\uffd6\037\uffd6\001\002\000\024\023\uffd5\024\uffd5" +
    "\025\060\026\061\030\uffd5\032\uffd5\034\uffd5\036\uffd5\037" +
    "\uffd5\001\002\000\024\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\030\uffd3\032\uffd3\034\uffd3\036\uffd3\037\uffd3\001\002\000" +
    "\024\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\032\uffd4" +
    "\034\uffd4\036\uffd4\037\uffd4\001\002\000\014\023\063\024" +
    "\062\025\060\026\061\034\071\001\002\000\006\032\uffdf" +
    "\037\072\001\002\000\004\033\051\001\002\000\004\032" +
    "\uffde\001\002\000\014\023\063\024\062\025\060\026\061" +
    "\030\075\001\002\000\024\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\030\uffd2\032\uffd2\034\uffd2\036\uffd2\037\uffd2\001\002" +
    "\000\004\036\077\001\002\000\026\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0" +
    "\034\uffe0\001\002\000\010\003\ufffd\004\ufffd\022\ufffd\001" +
    "\002\000\006\016\102\017\104\001\002\000\004\036\uffdc" +
    "\001\002\000\004\036\105\001\002\000\004\036\uffdb\001" +
    "\002\000\022\007\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\020\uffdd\021\uffdd\034\uffdd\001\002\000\004\031\107\001" +
    "\002\000\010\027\053\042\056\043\055\001\002\000\004" +
    "\032\114\001\002\000\016\023\063\024\062\025\060\026" +
    "\061\032\uffe2\037\112\001\002\000\010\027\053\042\056" +
    "\043\055\001\002\000\004\032\uffe1\001\002\000\004\036" +
    "\115\001\002\000\022\007\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\020\uffe3\021\uffe3\034\uffe3\001\002\000\010\027" +
    "\053\042\056\043\055\001\002\000\014\023\063\024\062" +
    "\025\060\026\061\036\120\001\002\000\022\007\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\034\uffd9" +
    "\001\002\000\004\040\122\001\002\000\004\036\123\001" +
    "\002\000\026\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\020\uffe7\021\uffe7\034\uffe7\001\002\000" +
    "\004\034\ufff5\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffa\001\002\000\006\002\ufff9\022\130\001\002\000" +
    "\004\027\132\001\002\000\004\002\ufffb\001\002\000\004" +
    "\040\133\001\002\000\004\030\134\001\002\000\004\036" +
    "\135\001\002\000\006\002\ufff7\022\ufff7\001\002\000\004" +
    "\002\ufff8\001\002\000\012\007\015\010\144\011\143\014" +
    "\026\001\002\000\014\007\015\010\144\011\143\014\026" +
    "\034\uffed\001\002\000\014\007\uffe9\010\uffe9\011\uffe9\014" +
    "\uffe9\034\uffe9\001\002\000\014\007\uffea\010\uffea\011\uffea" +
    "\014\uffea\034\uffea\001\002\000\004\035\156\001\002\000" +
    "\004\035\151\001\002\000\014\007\uffe8\010\uffe8\011\uffe8" +
    "\014\uffe8\034\uffe8\001\002\000\004\034\150\001\002\000" +
    "\014\007\uffeb\010\uffeb\011\uffeb\014\uffeb\034\uffeb\001\002" +
    "\000\010\003\ufffc\004\ufffc\022\ufffc\001\002\000\004\031" +
    "\152\001\002\000\004\040\041\001\002\000\004\032\154" +
    "\001\002\000\004\036\155\001\002\000\014\007\uffd8\010" +
    "\uffd8\011\uffd8\014\uffd8\034\uffd8\001\002\000\004\031\157" +
    "\001\002\000\010\027\053\042\056\043\055\001\002\000" +
    "\004\032\161\001\002\000\004\036\162\001\002\000\014" +
    "\007\uffd7\010\uffd7\011\uffd7\014\uffd7\034\uffd7\001\002\000" +
    "\004\034\uffec\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\002\001\001" +
    "\000\012\002\125\004\124\005\130\006\126\001\001\000" +
    "\002\001\001\000\024\007\024\010\013\013\031\014\022" +
    "\016\020\020\017\022\027\024\015\025\012\001\001\000" +
    "\002\001\001\000\024\007\123\010\013\013\031\014\022" +
    "\016\020\020\017\022\027\024\015\025\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\047\001\001\000\002\001\001" +
    "\000\006\030\053\031\051\001\001\000\002\001\001\000" +
    "\006\030\073\031\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\067\031\051\001" +
    "\001\000\006\030\066\031\051\001\001\000\006\030\065" +
    "\031\051\001\001\000\006\030\064\031\051\001\001\000" +
    "\006\030\063\031\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\107" +
    "\030\110\031\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\112\030\110\031\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\116\031\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\135\006\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\145\012" +
    "\137\013\146\020\144\026\141\027\140\001\001\000\016" +
    "\011\162\012\137\013\146\020\144\026\141\027\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\157\030\110" +
    "\031\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String definiciones = "";
    private String ejecuciones = "";

//REPORTES
    private ArrayList<Operacion> operaciones=new ArrayList<>();
    private int numGraficasBarras = 0;
    private int numGraficasPie = 0;
    private ArrayList<Error> listaErrores = new ArrayList<>();
    
    public ArrayList<Operacion> getOperaciones(){
        return this.operaciones;
    }

    public int numGraficasBarras(){
        return this.numGraficasBarras;
    }

    public int numGraficasPie(){
        return this.numGraficasPie;
    }

    public ArrayList<Error> getErrores(){
        return this.listaErrores;
    }

//Errores
    private Symbol s;
    private String mensajeFatalError = "";
    
    public void syntax_error(Symbol cur_token){
        this.listaErrores.add(new Error(cur_token.value.toString(),cur_token.right,cur_token.left,"Sintactico","Error sintactico"));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        this.mensajeFatalError+= "No se pudo recuperar el analizador. Linea:" + s.right + " Columna:" + s.left;
    }

    public String getMensajeFatalError(){
        return this.mensajeFatalError;
    }

    public Symbol getS(){
        return this.s;
    }

    public String getDefiniciones(){
        return this.definiciones;
    }

    public String getEjecuciones(){
        return this.ejecuciones;
    }

    private void agregarDefinicion(String definicion){
        this.definiciones = definicion + this.definiciones;
    }

    private void agregarEjecucion(String ejecucion){
        if(ejecucion !=null){
            this.ejecuciones+=ejecucion;
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= i EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // i ::= DEF d j 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarDefinicion(p1);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // i ::= error LLAVE_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // i ::= error PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // d ::= PIE LLAVE_A a LLAVE_C 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p1 + "%" + p3+"&"; numGraficasPie++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // d ::= BARRAS LLAVE_A e LLAVE_C 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p1 + "%" + p3+"&"; numGraficasBarras++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // j ::= c 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // j ::= i 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c ::= t 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c ::= t c 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + p2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t ::= EJECUTAR PARENTESIS_A PALABRA PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 agregarEjecucion(p1 + "%");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a ::= p 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // a ::= p a 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + p2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p ::= s 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p ::= f 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p ::= g 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // p ::= h 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // p ::= u 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // p ::= l 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // p ::= r 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // e ::= q 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= q e 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + p2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // q ::= s 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // q ::= n 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // q ::= o 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // q ::= h 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s ::= TITULO DOS_PUNTOS PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // f ::= ETIQUETAS DOS_PUNTOS CORCHETE_A etiqueta CORCHETE_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p1 + p2 + p4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiqueta ::= PALABRA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiqueta ::= PALABRA COMA etiqueta 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // g ::= VALORES DOS_PUNTOS CORCHETE_A valor CORCHETE_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p1 + p2 + p4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor ::= expr 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor ::= expr COMA valor 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // h ::= UNIR DOS_PUNTOS CORCHETE_A tuplas CORCHETE_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p1 + p2 + p4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("h",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tuplas ::= LLAVE_A expr COMA expr LLAVE_C 
            {
              String RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double p4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p2 + p3 + p4 + "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tuplas ::= LLAVE_A expr COMA expr LLAVE_C COMA tuplas 
            {
              String RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double p4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p2 + p3 + p4 + "#" + p7; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // u ::= TIPO DOS_PUNTOS tipo PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= CANTIDAD 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= PORCENTAJE 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l ::= EXTRA DOS_PUNTOS PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // r ::= TOTAL DOS_PUNTOS expr PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double p3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = p1 + p2 + p3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // n ::= EJEX DOS_PUNTOS CORCHETE_A etiqueta CORCHETE_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p1 + p2 + p4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // o ::= EJEY DOS_PUNTOS CORCHETE_A valor CORCHETE_C PUNTO_COMA 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = p1 + p2 + p4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr SIGNO_MAS expr 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1+p2);    operaciones.add( new Operacion("Suma",p1right ,p1left,  p1 +"+"+p2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr SIGNO_MENOS expr 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1-p2);        operaciones.add( new Operacion("Resta",p1right ,p1left,  p1+ "-"+p2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr SIGNO_POR expr 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1*p2);          operaciones.add( new Operacion("Multiplicacion",p1right ,p1left,  p1 +"*"+ p2));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr SIGNO_DIVISION expr 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1/p2);        operaciones.add( new Operacion("Division",p1right ,p1left, p1+ "/"+p2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= PARENTESIS_A expr PARENTESIS_C 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Double(p1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= numero 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // numero ::= ENTERO 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(p1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // numero ::= DECIMAL 
            {
              Double RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
